circuit ibex_core :
  module ibex_core :
    input clock : Clock
    input reset : UInt<1>
    input a_in : UInt<16>[4]
    input b_in : UInt<16>[4]
    input c_in : UInt<16>[4]
    output c_out : UInt<16>[4]
    input stationaryCtrl : UInt<1>

    reg a_reg : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), a_reg) @[ibex_core.scala 16:18]
    reg b_reg : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), b_reg) @[ibex_core.scala 17:18]
    reg c_reg : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), c_reg) @[ibex_core.scala 18:18]
    a_reg[0][0] <= a_in[0] @[ibex_core.scala 22:17]
    a_reg[1][0] <= a_reg[0][0] @[ibex_core.scala 24:19]
    a_reg[2][0] <= a_reg[1][0] @[ibex_core.scala 24:19]
    a_reg[3][0] <= a_reg[2][0] @[ibex_core.scala 24:19]
    a_reg[0][1] <= a_in[1] @[ibex_core.scala 22:17]
    a_reg[1][1] <= a_reg[0][1] @[ibex_core.scala 24:19]
    a_reg[2][1] <= a_reg[1][1] @[ibex_core.scala 24:19]
    a_reg[3][1] <= a_reg[2][1] @[ibex_core.scala 24:19]
    a_reg[0][2] <= a_in[2] @[ibex_core.scala 22:17]
    a_reg[1][2] <= a_reg[0][2] @[ibex_core.scala 24:19]
    a_reg[2][2] <= a_reg[1][2] @[ibex_core.scala 24:19]
    a_reg[3][2] <= a_reg[2][2] @[ibex_core.scala 24:19]
    a_reg[0][3] <= a_in[3] @[ibex_core.scala 22:17]
    a_reg[1][3] <= a_reg[0][3] @[ibex_core.scala 24:19]
    a_reg[2][3] <= a_reg[1][3] @[ibex_core.scala 24:19]
    a_reg[3][3] <= a_reg[2][3] @[ibex_core.scala 24:19]
    when stationaryCtrl : @[ibex_core.scala 29:25]
      b_reg[0][0] <= b_in[0] @[ibex_core.scala 31:19]
      b_reg[0][1] <= b_reg[0][0] @[ibex_core.scala 33:21]
      b_reg[0][2] <= b_reg[0][1] @[ibex_core.scala 33:21]
      b_reg[0][3] <= b_reg[0][2] @[ibex_core.scala 33:21]
      b_reg[1][0] <= b_in[1] @[ibex_core.scala 31:19]
      b_reg[1][1] <= b_reg[1][0] @[ibex_core.scala 33:21]
      b_reg[1][2] <= b_reg[1][1] @[ibex_core.scala 33:21]
      b_reg[1][3] <= b_reg[1][2] @[ibex_core.scala 33:21]
      b_reg[2][0] <= b_in[2] @[ibex_core.scala 31:19]
      b_reg[2][1] <= b_reg[2][0] @[ibex_core.scala 33:21]
      b_reg[2][2] <= b_reg[2][1] @[ibex_core.scala 33:21]
      b_reg[2][3] <= b_reg[2][2] @[ibex_core.scala 33:21]
      b_reg[3][0] <= b_in[3] @[ibex_core.scala 31:19]
      b_reg[3][1] <= b_reg[3][0] @[ibex_core.scala 33:21]
      b_reg[3][2] <= b_reg[3][1] @[ibex_core.scala 33:21]
      b_reg[3][3] <= b_reg[3][2] @[ibex_core.scala 33:21]
    node _T = eq(stationaryCtrl, UInt<1>("h0")) @[ibex_core.scala 39:9]
    when _T : @[ibex_core.scala 39:26]
      node _c_reg_0_0_T = mul(a_reg[0][0], b_reg[0][0]) @[ibex_core.scala 41:34]
      node _c_reg_0_0_T_1 = add(_c_reg_0_0_T, c_in[0]) @[ibex_core.scala 41:48]
      node _c_reg_0_0_T_2 = tail(_c_reg_0_0_T_1, 1) @[ibex_core.scala 41:48]
      c_reg[0][0] <= _c_reg_0_0_T_2 @[ibex_core.scala 41:19]
      node _c_reg_0_1_T = mul(a_reg[0][1], b_reg[0][1]) @[ibex_core.scala 43:36]
      node _c_reg_0_1_T_1 = add(_c_reg_0_1_T, c_reg[0][0]) @[ibex_core.scala 43:50]
      node _c_reg_0_1_T_2 = tail(_c_reg_0_1_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[0][1] <= _c_reg_0_1_T_2 @[ibex_core.scala 43:21]
      node _c_reg_0_2_T = mul(a_reg[0][2], b_reg[0][2]) @[ibex_core.scala 43:36]
      node _c_reg_0_2_T_1 = add(_c_reg_0_2_T, c_reg[0][1]) @[ibex_core.scala 43:50]
      node _c_reg_0_2_T_2 = tail(_c_reg_0_2_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[0][2] <= _c_reg_0_2_T_2 @[ibex_core.scala 43:21]
      node _c_reg_0_3_T = mul(a_reg[0][3], b_reg[0][3]) @[ibex_core.scala 43:36]
      node _c_reg_0_3_T_1 = add(_c_reg_0_3_T, c_reg[0][2]) @[ibex_core.scala 43:50]
      node _c_reg_0_3_T_2 = tail(_c_reg_0_3_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[0][3] <= _c_reg_0_3_T_2 @[ibex_core.scala 43:21]
      node _c_reg_1_0_T = mul(a_reg[1][0], b_reg[1][0]) @[ibex_core.scala 41:34]
      node _c_reg_1_0_T_1 = add(_c_reg_1_0_T, c_in[1]) @[ibex_core.scala 41:48]
      node _c_reg_1_0_T_2 = tail(_c_reg_1_0_T_1, 1) @[ibex_core.scala 41:48]
      c_reg[1][0] <= _c_reg_1_0_T_2 @[ibex_core.scala 41:19]
      node _c_reg_1_1_T = mul(a_reg[1][1], b_reg[1][1]) @[ibex_core.scala 43:36]
      node _c_reg_1_1_T_1 = add(_c_reg_1_1_T, c_reg[1][0]) @[ibex_core.scala 43:50]
      node _c_reg_1_1_T_2 = tail(_c_reg_1_1_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[1][1] <= _c_reg_1_1_T_2 @[ibex_core.scala 43:21]
      node _c_reg_1_2_T = mul(a_reg[1][2], b_reg[1][2]) @[ibex_core.scala 43:36]
      node _c_reg_1_2_T_1 = add(_c_reg_1_2_T, c_reg[1][1]) @[ibex_core.scala 43:50]
      node _c_reg_1_2_T_2 = tail(_c_reg_1_2_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[1][2] <= _c_reg_1_2_T_2 @[ibex_core.scala 43:21]
      node _c_reg_1_3_T = mul(a_reg[1][3], b_reg[1][3]) @[ibex_core.scala 43:36]
      node _c_reg_1_3_T_1 = add(_c_reg_1_3_T, c_reg[1][2]) @[ibex_core.scala 43:50]
      node _c_reg_1_3_T_2 = tail(_c_reg_1_3_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[1][3] <= _c_reg_1_3_T_2 @[ibex_core.scala 43:21]
      node _c_reg_2_0_T = mul(a_reg[2][0], b_reg[2][0]) @[ibex_core.scala 41:34]
      node _c_reg_2_0_T_1 = add(_c_reg_2_0_T, c_in[2]) @[ibex_core.scala 41:48]
      node _c_reg_2_0_T_2 = tail(_c_reg_2_0_T_1, 1) @[ibex_core.scala 41:48]
      c_reg[2][0] <= _c_reg_2_0_T_2 @[ibex_core.scala 41:19]
      node _c_reg_2_1_T = mul(a_reg[2][1], b_reg[2][1]) @[ibex_core.scala 43:36]
      node _c_reg_2_1_T_1 = add(_c_reg_2_1_T, c_reg[2][0]) @[ibex_core.scala 43:50]
      node _c_reg_2_1_T_2 = tail(_c_reg_2_1_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[2][1] <= _c_reg_2_1_T_2 @[ibex_core.scala 43:21]
      node _c_reg_2_2_T = mul(a_reg[2][2], b_reg[2][2]) @[ibex_core.scala 43:36]
      node _c_reg_2_2_T_1 = add(_c_reg_2_2_T, c_reg[2][1]) @[ibex_core.scala 43:50]
      node _c_reg_2_2_T_2 = tail(_c_reg_2_2_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[2][2] <= _c_reg_2_2_T_2 @[ibex_core.scala 43:21]
      node _c_reg_2_3_T = mul(a_reg[2][3], b_reg[2][3]) @[ibex_core.scala 43:36]
      node _c_reg_2_3_T_1 = add(_c_reg_2_3_T, c_reg[2][2]) @[ibex_core.scala 43:50]
      node _c_reg_2_3_T_2 = tail(_c_reg_2_3_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[2][3] <= _c_reg_2_3_T_2 @[ibex_core.scala 43:21]
      node _c_reg_3_0_T = mul(a_reg[3][0], b_reg[3][0]) @[ibex_core.scala 41:34]
      node _c_reg_3_0_T_1 = add(_c_reg_3_0_T, c_in[3]) @[ibex_core.scala 41:48]
      node _c_reg_3_0_T_2 = tail(_c_reg_3_0_T_1, 1) @[ibex_core.scala 41:48]
      c_reg[3][0] <= _c_reg_3_0_T_2 @[ibex_core.scala 41:19]
      node _c_reg_3_1_T = mul(a_reg[3][1], b_reg[3][1]) @[ibex_core.scala 43:36]
      node _c_reg_3_1_T_1 = add(_c_reg_3_1_T, c_reg[3][0]) @[ibex_core.scala 43:50]
      node _c_reg_3_1_T_2 = tail(_c_reg_3_1_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[3][1] <= _c_reg_3_1_T_2 @[ibex_core.scala 43:21]
      node _c_reg_3_2_T = mul(a_reg[3][2], b_reg[3][2]) @[ibex_core.scala 43:36]
      node _c_reg_3_2_T_1 = add(_c_reg_3_2_T, c_reg[3][1]) @[ibex_core.scala 43:50]
      node _c_reg_3_2_T_2 = tail(_c_reg_3_2_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[3][2] <= _c_reg_3_2_T_2 @[ibex_core.scala 43:21]
      node _c_reg_3_3_T = mul(a_reg[3][3], b_reg[3][3]) @[ibex_core.scala 43:36]
      node _c_reg_3_3_T_1 = add(_c_reg_3_3_T, c_reg[3][2]) @[ibex_core.scala 43:50]
      node _c_reg_3_3_T_2 = tail(_c_reg_3_3_T_1, 1) @[ibex_core.scala 43:50]
      c_reg[3][3] <= _c_reg_3_3_T_2 @[ibex_core.scala 43:21]
    c_out[0] <= c_reg[0][3] @[ibex_core.scala 50:14]
    c_out[1] <= c_reg[1][3] @[ibex_core.scala 50:14]
    c_out[2] <= c_reg[2][3] @[ibex_core.scala 50:14]
    c_out[3] <= c_reg[3][3] @[ibex_core.scala 50:14]

